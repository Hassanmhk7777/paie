{% load static %}

<div class="container-fluid">
    <link rel="stylesheet" href="{% static 'css/leave.css' %}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.min.css" rel="stylesheet">
    <style>
    .balance-card {
    transition: transform 0.2s, box-shadow 0.2s;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background: #fff;
}

.balance-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.balance-header {
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 8px 8px 0 0;
}

.balance-content {
    padding: 20px;
}

.balance-value {
    font-size: 2rem;
    font-weight: bold;
    margin: 10px 0;
}

.balance-label {
    color: #6c757d;
    font-size: 0.9rem;
    margin-bottom: 5px;
}

.balance-progress {
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin: 10px 0;
}

.balance-progress-bar {
    height: 100%;
    transition: width 0.3s ease;
}

.progress-used { background: linear-gradient(90deg, #28a745 0%, #ffc107 70%, #dc3545 90%); }
.progress-pending { background: #fd7e14; }
.progress-remaining { background: #20c997; }

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.chart-container {
    background: #fff;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    padding: 20px;
    margin-bottom: 20px;
}

.chart-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #f1f3f4;
}

.filter-tabs {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 5px;
    margin-bottom: 20px;
}

.filter-tab {
    background: transparent;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.2s;
}

.filter-tab.active {
    background: #fff;
    color: #495057;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.employee-balance-table {
    font-size: 0.9rem;
}

.employee-row {
    cursor: pointer;
    transition: background-color 0.2s;
}

.employee-row:hover {
    background-color: #f8f9fa;
}

.balance-warning {
    color: #e67e22;
    font-weight: bold;
}

.balance-critical {
    color: #e74c3c;
    font-weight: bold;
}

.balance-good {
    color: #27ae60;
    font-weight: bold;
}

.trend-indicator {
    font-size: 0.8rem;
    margin-left: 5px;
}

.trend-up { color: #e74c3c; }
.trend-down { color: #27ae60; }
.trend-stable { color: #6c757d; }

.department-summary {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    margin-bottom: 20px;
}

.department-header {
    background: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #dee2e6;
    font-weight: bold;
    color: #495057;
}

.department-metrics {
    padding: 15px 20px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
}

.metric-item {
    text-align: center;
}

.metric-value {
    font-size: 1.2rem;
    font-weight: bold;
    color: #495057;
}

.metric-label {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 2px;
}

.alert-section {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 6px;
    padding: 15px;
    margin-bottom: 20px;
}

.alert-title {
    font-weight: bold;
    color: #856404;
    margin-bottom: 10px;
}

.alert-item {
    padding: 5px 0;
    border-bottom: 1px solid #fff5d6;
    font-size: 0.9rem;
}

.alert-item:last-child {
    border-bottom: none;
}

.export-section {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 15px;
    margin-top: 20px;
}

@media (max-width: 768px) {
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .department-metrics {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .balance-value {
        font-size: 1.5rem;
    }
}

.chart-canvas {
    max-height: 400px;
}

.loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}
</style>
</style>

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center">
    <h2 class="mb-0">
        <i class="fas fa-chart-bar text-primary me-2"></i>
        Soldes et Statistiques
    </h2>
    <div class="d-flex gap-2 align-items-center">
        <div class="filter-tabs">
            <button class="filter-tab active" data-period="current">Exercice actuel</button>
            <button class="filter-tab" data-period="previous">Exercice précédent</button>
            <button class="filter-tab" data-period="comparison">Comparaison</button>
        </div>
        <div class="dropdown">
            <button class="btn btn-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="fas fa-download me-1"></i>Rapports
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="exportReport('balances_summary')">
                    <i class="fas fa-file-pdf me-2"></i>Synthèse des soldes
                </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportReport('detailed_balances')">
                    <i class="fas fa-file-excel me-2"></i>Détail par employé
                </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportReport('department_analysis')">
                    <i class="fas fa-chart-pie me-2"></i>Analyse par département
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" onclick="exportReport('trends_analysis')">
                    <i class="fas fa-chart-line me-2"></i>Analyse des tendances
                </a></li>
            </ul>
        </div>
        <button class="btn btn-success btn-sm" onclick="refreshData()">
            <i class="fas fa-sync-alt me-1"></i>Actualiser
        </button>
    </div>
</div>

<!-- Content -->
<div class="container-fluid">
    <!-- Alertes et notifications -->
    <div id="alertsSection" class="alert-section" style="display: none;">
        <div class="alert-title">
            <i class="fas fa-exclamation-triangle me-2"></i>Alertes importantes
        </div>
        <div id="alertsList"></div>
    </div>

    <!-- Statistiques globales -->
    <div class="stats-grid">
        <div class="balance-card">
            <div class="balance-header">
                <h6 class="mb-0">
                    <i class="fas fa-users text-primary me-2"></i>
                    Employés actifs
                </h6>
            </div>
            <div class="balance-content text-center">
                <div class="balance-value text-primary" id="total-employees">-</div>
                <div class="balance-label">Total dans l'entreprise</div>
                <small class="text-muted">
                    <span id="new-employees">+0</span> ce mois
                </small>
            </div>
        </div>

        <div class="balance-card">
            <div class="balance-header">
                <h6 class="mb-0">
                    <i class="fas fa-calendar-check text-success me-2"></i>
                    Congés pris
                </h6>
            </div>
            <div class="balance-content text-center">
                <div class="balance-value text-success" id="total-taken">-</div>
                <div class="balance-label">Jours cette année</div>
                <div class="balance-progress">
                    <div class="balance-progress-bar progress-used" id="taken-progress" style="width: 0%"></div>
                </div>
                <small class="text-muted">
                    <span id="taken-vs-last-year">+0%</span> vs année précédente
                </small>
            </div>
        </div>

        <div class="balance-card">
            <div class="balance-header">
                <h6 class="mb-0">
                    <i class="fas fa-clock text-warning me-2"></i>
                    En attente
                </h6>
            </div>
            <div class="balance-content text-center">
                <div class="balance-value text-warning" id="total-pending">-</div>
                <div class="balance-label">Demandes à traiter</div>
                <div class="balance-progress">
                    <div class="balance-progress-bar progress-pending" id="pending-progress" style="width: 0%"></div>
                </div>
                <small class="text-muted">
                    Temps moyen : <span id="avg-processing-time">0</span> jours
                </small>
            </div>
        </div>

        <div class="balance-card">
            <div class="balance-header">
                <h6 class="mb-0">
                    <i class="fas fa-piggy-bank text-info me-2"></i>
                    Soldes restants
                </h6>
            </div>
            <div class="balance-content text-center">
                <div class="balance-value text-info" id="total-remaining">-</div>
                <div class="balance-label">Jours disponibles</div>
                <div class="balance-progress">
                    <div class="balance-progress-bar progress-remaining" id="remaining-progress" style="width: 0%"></div>
                </div>
                <small class="text-muted">
                    Moyenne par employé : <span id="avg-remaining">0</span> jours
                </small>
            </div>
        </div>
    </div>

    <!-- Graphiques et analyses -->
    <div class="row">
        <div class="col-lg-8">
            <!-- Graphique d'évolution -->
            <div class="chart-container">
                <div class="chart-header">
                    <h5 class="mb-0">Évolution des congés</h5>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-secondary active" data-chart-period="year">Année</button>
                        <button class="btn btn-outline-secondary" data-chart-period="quarter">Trimestre</button>
                        <button class="btn btn-outline-secondary" data-chart-period="month">Mois</button>
                    </div>
                </div>
                <canvas id="evolutionChart" class="chart-canvas"></canvas>
            </div>

            <!-- Répartition par type -->
            <div class="chart-container">
                <div class="chart-header">
                    <h5 class="mb-0">Répartition par type de congé</h5>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-secondary active" data-type-view="current">Exercice actuel</button>
                        <button class="btn btn-outline-secondary" data-type-view="department">Par département</button>
                    </div>
                </div>
                <canvas id="typeChart" class="chart-canvas"></canvas>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Top des utilisateurs -->
            <div class="chart-container">
                <div class="chart-header">
                    <h6 class="mb-0">Top congés pris</h6>
                </div>
                <div id="topUsersChart">
                    <!-- Chargé dynamiquement -->
                </div>
            </div>

            <!-- Analyse saisonnière -->
            <div class="chart-container">
                <div class="chart-header">
                    <h6 class="mb-0">Répartition mensuelle</h6>
                </div>
                <canvas id="seasonalChart" class="chart-canvas"></canvas>
            </div>
        </div>
    </div>

    <!-- Analyse par département -->
    <div class="row mt-4">
        <div class="col-12">
            <h4 class="mb-3">Analyse par département</h4>
            <div id="departmentAnalysis">
                <!-- Chargé dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Tableau détaillé des soldes -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="chart-container">
                <div class="chart-header">
                    <h5 class="mb-0">Soldes détaillés par employé</h5>
                    <div class="d-flex gap-2">
                        <div class="input-group input-group-sm" style="max-width: 250px;">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="employeeFilter" 
                                   placeholder="Rechercher un employé...">
                        </div>
                        <select class="form-select form-select-sm" id="departmentFilterTable" style="max-width: 200px;">
                            <option value="">Tous les départements</option>
                            <option value="rh">Ressources Humaines</option>
                            <option value="it">Informatique</option>
                            <option value="finance">Finance</option>
                            <option value="commercial">Commercial</option>
                            <option value="production">Production</option>
                        </select>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-hover employee-balance-table" id="balancesTable">
                        <thead class="table-light">
                            <tr>
                                <th>Employé</th>
                                <th>Département</th>
                                <th class="text-center">Acquis</th>
                                <th class="text-center">Pris</th>
                                <th class="text-center">En attente</th>
                                <th class="text-center">Restant</th>
                                <th class="text-center">Report N-1</th>
                                <th class="text-center">Statut</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="balancesTableBody">
                            <!-- Chargé dynamiquement -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <nav aria-label="Navigation pages" class="mt-3">
                    <ul class="pagination justify-content-center" id="balancesPagination">
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- Export rapide -->
    <div class="export-section">
        <h6 class="mb-3">
            <i class="fas fa-download me-2"></i>Exports rapides
        </h6>
        <div class="row">
            <div class="col-md-3">
                <button class="btn btn-outline-primary btn-sm w-100 mb-2" onclick="quickExport('current_balances')">
                    <i class="fas fa-table me-1"></i>Soldes actuels
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-success btn-sm w-100 mb-2" onclick="quickExport('year_summary')">
                    <i class="fas fa-chart-bar me-1"></i>Synthèse annuelle
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-info btn-sm w-100 mb-2" onclick="quickExport('department_report')">
                    <i class="fas fa-building me-1"></i>Rapport départements
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-warning btn-sm w-100 mb-2" onclick="quickExport('alerts_report')">
                    <i class="fas fa-exclamation-triangle me-1"></i>Rapport alertes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal détails employé -->
<div class="modal fade" id="employeeBalanceModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Détail des congés</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6 class="text-muted">Informations employé</h6>
                        <p><strong>Nom :</strong> <span id="modal-emp-name"></span></p>
                        <p><strong>Département :</strong> <span id="modal-emp-dept"></span></p>
                        <p><strong>Date d'embauche :</strong> <span id="modal-emp-hire-date"></span></p>
                        <p><strong>Manager :</strong> <span id="modal-emp-manager"></span></p>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-muted">Soldes actuels</h6>
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="stat-card mb-2">
                                    <div class="stat-value text-primary" id="modal-acquired">0</div>
                                    <div class="stat-label">Acquis</div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="stat-card mb-2">
                                    <div class="stat-value text-success" id="modal-remaining">0</div>
                                    <div class="stat-label">Restant</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <h6 class="text-muted">Historique des congés</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Période</th>
                                <th>Durée</th>
                                <th>Statut</th>
                            </tr>
                        </thead>
                        <tbody id="modal-leave-history">
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                <button type="button" class="btn btn-primary" id="viewEmployeeProfile">
                    Voir le profil complet
                </button>
            </div>
        </div>
    </div>
</div>
<!-- JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.min.js"></script>
<script>
// Variables globales
var currentPeriod = 'current';
var evolutionChart, typeChart, seasonalChart;
var balancesData = [];

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initializeFilters();
    loadBalancesData();
    initializeCharts();
});

// Initialisation des filtres de période
function initializeFilters() {
    document.querySelectorAll('.filter-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            currentPeriod = this.dataset.period;
            loadBalancesData();
        });
    });
    
    // Filtres de graphiques
    document.querySelectorAll('[data-chart-period]').forEach(btn => {
        btn.addEventListener('click', function() {
            this.parentElement.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            updateEvolutionChart(this.dataset.chartPeriod);
        });
    });
    
    document.querySelectorAll('[data-type-view]').forEach(btn => {
        btn.addEventListener('click', function() {
            this.parentElement.querySelectorAll('button').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            updateTypeChart(this.dataset.typeView);
        });
    });
}

// Chargement des données
async function loadBalancesData() {
    try {
        showDataLoading();
        
        const response = await fetch(`/api/leave/balances/?period=${currentPeriod}`);
        const data = await response.json();
        
        balancesData = data;
        updateGlobalStats(data.stats);
        updateDepartmentAnalysis(data.departments);
        updateBalancesTable(data.employees);
        updateCharts(data);
        checkAlerts(data.alerts);
        
    } catch (error) {
        console.error('Erreur lors du chargement des données:', error);
        showError('Erreur lors du chargement des données');
    }
}

// Mise à jour des statistiques globales
function updateGlobalStats(stats) {
    document.getElementById('total-employees').textContent = stats.total_employees || 0;
    document.getElementById('new-employees').textContent = `+${stats.new_employees || 0}`;
    document.getElementById('total-taken').textContent = stats.total_taken || 0;
    document.getElementById('total-pending').textContent = stats.total_pending || 0;
    document.getElementById('total-remaining').textContent = stats.total_remaining || 0;
    document.getElementById('avg-remaining').textContent = stats.avg_remaining || 0;
    document.getElementById('taken-vs-last-year').textContent = `${stats.taken_vs_last_year > 0 ? '+' : ''}${stats.taken_vs_last_year || 0}%`;
    document.getElementById('avg-processing-time').textContent = stats.avg_processing_time || 0;
    
    // Barres de progression
    const takenPercent = stats.total_employees > 0 ? (stats.total_taken / (stats.total_employees * 25)) * 100 : 0;
    const pendingPercent = stats.total_employees > 0 ? (stats.total_pending / (stats.total_employees * 5)) * 100 : 0;
    const remainingPercent = stats.total_employees > 0 ? (stats.total_remaining / (stats.total_employees * 25)) * 100 : 0;
    
    document.getElementById('taken-progress').style.width = `${Math.min(takenPercent, 100)}%`;
    document.getElementById('pending-progress').style.width = `${Math.min(pendingPercent, 100)}%`;
    document.getElementById('remaining-progress').style.width = `${Math.min(remainingPercent, 100)}%`;
}

// Mise à jour de l'analyse par département
function updateDepartmentAnalysis(departments) {
    const container = document.getElementById('departmentAnalysis');
    
    container.innerHTML = departments.map(dept => `
        <div class="department-summary">
            <div class="department-header">
                <i class="fas fa-building me-2"></i>
                ${dept.name} (${dept.employee_count} employés)
            </div>
            <div class="department-metrics">
                <div class="metric-item">
                    <div class="metric-value">${dept.total_taken}</div>
                    <div class="metric-label">Jours pris</div>
                </div>
                <div class="metric-item">
                    <div class="metric-value">${dept.total_remaining}</div>
                    <div class="metric-label">Jours restants</div>
                </div>
                <div class="metric-item">
                    <div class="metric-value">${dept.pending_requests}</div>
                    <div class="metric-label">En attente</div>
                </div>
                <div class="metric-item">
                    <div class="metric-value">${dept.avg_balance}j</div>
                    <div class="metric-label">Moyenne/employé</div>
                </div>
                <div class="metric-item">
                    <div class="metric-value text-${dept.utilization_rate > 80 ? 'success' : dept.utilization_rate > 60 ? 'warning' : 'danger'}">${dept.utilization_rate}%</div>
                    <div class="metric-label">Taux utilisation</div>
                </div>
            </div>
        </div>
    `).join('');
}

// Mise à jour du tableau des soldes
function updateBalancesTable(employees) {
    const tbody = document.getElementById('balancesTableBody');
    
    if (employees.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center text-muted py-4">
                    Aucune donnée disponible
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = employees.map(emp => `
        <tr class="employee-row" onclick="showEmployeeDetails(${emp.id})">
            <td>
                <div class="d-flex align-items-center">
                    <img src="${emp.avatar || '/static/img/default-avatar.png'}" 
                         class="employee-avatar me-2" style="width: 32px; height: 32px;" alt="">
                    <div>
                        <strong>${emp.full_name}</strong><br>
                        <small class="text-muted">${emp.position || ''}</small>
                    </div>
                </div>
            </td>
            <td>${emp.department}</td>
            <td class="text-center">${emp.acquired_days}</td>
            <td class="text-center">${emp.taken_days}</td>
            <td class="text-center">${emp.pending_days}</td>
            <td class="text-center">
                <span class="balance-${getBalanceStatus(emp.remaining_days)}">${emp.remaining_days}</span>
                ${emp.trend ? `<span class="trend-indicator trend-${emp.trend}">
                    <i class="fas fa-${getTrendIcon(emp.trend)}"></i>
                </span>` : ''}
            </td>
            <td class="text-center">${emp.carried_over || 0}</td>
            <td class="text-center">
                <span class="badge bg-${getBalanceStatusColor(emp.remaining_days)} balance-status">
                    ${getBalanceStatusText(emp.remaining_days)}
                </span>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); showEmployeeDetails(${emp.id})" title="Voir détails">
                    <i class="fas fa-eye"></i>
                </button>
            </td>
        </tr>
    `).join('');
}

// Fonctions utilitaires pour le statut des soldes
function getBalanceStatus(days) {
    if (days < 5) return 'critical';
    if (days < 10) return 'warning';
    return 'good';
}

function getBalanceStatusColor(days) {
    if (days < 5) return 'danger';
    if (days < 10) return 'warning';
    return 'success';
}

function getBalanceStatusText(days) {
    if (days < 5) return 'Critique';
    if (days < 10) return 'Attention';
    return 'Normal';
}

function getTrendIcon(trend) {
    return trend === 'up' ? 'arrow-up' : trend === 'down' ? 'arrow-down' : 'minus';
}

// Initialisation des graphiques
function initializeCharts() {
    // Graphique d'évolution
    const evolutionCtx = document.getElementById('evolutionChart').getContext('2d');
    evolutionChart = new Chart(evolutionCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Jours pris',
                data: [],
                borderColor: '#3b82f6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                tension: 0.4
            }, {
                label: 'Demandes en attente',
                data: [],
                borderColor: '#f59e0b',
                backgroundColor: 'rgba(245, 158, 11, 0.1)',
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Graphique par type
    const typeCtx = document.getElementById('typeChart').getContext('2d');
    typeChart = new Chart(typeCtx, {
        type: 'doughnut',
        data: {
            labels: ['Congés payés', 'Congé maladie', 'Congé maternité', 'Congé paternité', 'Congé sans solde'],
            datasets: [{
                data: [],
                backgroundColor: ['#3b82f6', '#ef4444', '#ec4899', '#8b5cf6', '#6b7280']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Graphique saisonnier
    const seasonalCtx = document.getElementById('seasonalChart').getContext('2d');
    seasonalChart = new Chart(seasonalCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc'],
            datasets: [{
                label: 'Demandes',
                data: [],
                backgroundColor: '#3b82f6'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Mise à jour des graphiques
function updateCharts(data) {
    // Évolution
    if (data.evolution) {
        evolutionChart.data.labels = data.evolution.labels;
        evolutionChart.data.datasets[0].data = data.evolution.taken;
        evolutionChart.data.datasets[1].data = data.evolution.pending;
        evolutionChart.update();
    }

    // Types
    if (data.types) {
        typeChart.data.datasets[0].data = data.types;
        typeChart.update();
    }

    // Saisonnier
    if (data.seasonal) {
        seasonalChart.data.datasets[0].data = data.seasonal;
        seasonalChart.update();
    }

    // Top utilisateurs
    if (data.top_users) {
        updateTopUsersChart(data.top_users);
    }
}

// Top utilisateurs
function updateTopUsersChart(topUsers) {
    const container = document.getElementById('topUsersChart');
    
    container.innerHTML = topUsers.map((user, index) => `
        <div class="d-flex justify-content-between align-items-center py-2 ${index < topUsers.length - 1 ? 'border-bottom' : ''}">
            <div class="d-flex align-items-center">
                <span class="badge bg-primary me-2">${index + 1}</span>
                <div>
                    <div class="fw-bold">${user.name}</div>
                    <small class="text-muted">${user.department}</small>
                </div>
            </div>
            <div class="text-end">
                <div class="fw-bold">${user.days_taken}j</div>
                <small class="text-muted">${user.percentage}%</small>
            </div>
        </div>
    `).join('');
}

// Vérification des alertes
function checkAlerts(alerts) {
    const alertsSection = document.getElementById('alertsSection');
    const alertsList = document.getElementById('alertsList');
    
    if (alerts && alerts.length > 0) {
        alertsList.innerHTML = alerts.map(alert => `
            <div class="alert-item">
                <i class="fas fa-${alert.icon} me-2"></i>
                ${alert.message}
            </div>
        `).join('');
        alertsSection.style.display = 'block';
    } else {
        alertsSection.style.display = 'none';
    }
}

// Affichage des détails d'un employé
async function showEmployeeDetails(employeeId) {
    try {
        const response = await fetch(`/api/employees/${employeeId}/leave-details/`);
        const data = await response.json();
        
        // Remplir le modal
        document.getElementById('modal-emp-name').textContent = data.employee.full_name;
        document.getElementById('modal-emp-dept').textContent = data.employee.department;
        document.getElementById('modal-emp-hire-date').textContent = formatDate(data.employee.hire_date);
        document.getElementById('modal-emp-manager').textContent = data.employee.manager || '-';
        document.getElementById('modal-acquired').textContent = data.balance.acquired;
        document.getElementById('modal-remaining').textContent = data.balance.remaining;
        
        // Historique
        const historyTBody = document.getElementById('modal-leave-history');
        historyTBody.innerHTML = data.history.map(leave => `
            <tr>
                <td><span class="badge bg-secondary">${leave.type_display}</span></td>
                <td>${formatDate(leave.start_date)} - ${formatDate(leave.end_date)}</td>
                <td>${leave.duration}j</td>
                <td><span class="badge bg-${getStatusColor(leave.status)}">${leave.status_display}</span></td>
            </tr>
        `).join('');
        
        document.getElementById('viewEmployeeProfile').onclick = () => {
            window.location.href = `/employees/${employeeId}/`;
        };
        
        new bootstrap.Modal(document.getElementById('employeeBalanceModal')).show();
        
    } catch (error) {
        console.error('Erreur:', error);
        showError('Erreur lors du chargement des détails');
    }
}

// Exports
async function exportReport(type) {
    try {
        const response = await fetch(`/api/leave/reports/export/?type=${type}&period=${currentPeriod}`);
        
        if (response.headers.get('content-type').includes('application/json')) {
            const data = await response.json();
            if (data.error) {
                showError(data.error);
                return;
            }
        }
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `rapport-${type}-${new Date().toISOString().split('T')[0]}.${type.includes('pdf') ? 'pdf' : 'xlsx'}`;
        a.click();
        window.URL.revokeObjectURL(url);
        
        showSuccess('Rapport exporté avec succès');
        
    } catch (error) {
        console.error('Erreur export:', error);
        showError('Erreur lors de l\'export');
    }
}

async function quickExport(type) {
    await exportReport(type);
}

// Fonctions utilitaires
function showDataLoading() {
    // Afficher les états de chargement
    document.querySelectorAll('.stat-value').forEach(el => {
        el.innerHTML = '<div class="loading-skeleton" style="height: 1.5rem; width: 60px; border-radius: 4px;"></div>';
    });
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('fr-FR');
}

function getStatusColor(status) {
    const colors = {
        'pending': 'warning',
        'approved': 'success',
        'rejected': 'danger'
    };
    return colors[status] || 'secondary';
}

function showSuccess(message) {
    // Notification de succès (à implémenter selon le système existant)
    console.log('Success:', message);
}

function showError(message) {
    // Notification d'erreur (à implémenter selon le système existant)
    console.error('Error:', message);
}

function refreshData() {
    loadBalancesData();
}

// Filtres du tableau
document.getElementById('employeeFilter').addEventListener('input', function() {
    filterTable();
});

document.getElementById('departmentFilterTable').addEventListener('change', function() {
    filterTable();
});

function filterTable() {
    const nameFilter = document.getElementById('employeeFilter').value.toLowerCase();
    const deptFilter = document.getElementById('departmentFilterTable').value;
    const rows = document.querySelectorAll('#balancesTableBody tr');
    
    rows.forEach(row => {
        if (row.cells.length === 1) return; // Ligne "aucune donnée"
        
        const name = row.cells[0].textContent.toLowerCase();
        const dept = row.cells[1].textContent;
        
        const nameMatch = !nameFilter || name.includes(nameFilter);
        const deptMatch = !deptFilter || dept.includes(deptFilter);
        
        row.style.display = nameMatch && deptMatch ? '' : 'none';
    });
}
</script>
</div><!-- Fin du container -->