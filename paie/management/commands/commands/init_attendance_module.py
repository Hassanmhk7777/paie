# paie/management/commands/init_attendance_module.py
# Script Django pour initialiser le module Pointage & Pr√©sence avec des donn√©es de test

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group, Permission
from django.utils import timezone
from datetime import datetime, date, time, timedelta
import random
from decimal import Decimal

from paie.models import (
    # Mod√®les existants (suppos√©s)
    Employee, Departement,
    # Nouveaux mod√®les du module pointage
    PlageHoraire, HoraireTravail, ReglePointage, Pointage, 
    PresenceJournaliere, ValidationPresence, AlertePresence
)


class Command(BaseCommand):
    help = 'Initialise le module Pointage & Pr√©sence avec des donn√©es de test'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full-demo',
            action='store_true',
            help='Cr√©er un jeu de donn√©es complet avec historique (30 jours)',
        )
        parser.add_argument(
            '--employees-count',
            type=int,
            default=20,
            help='Nombre d\'employ√©s √† cr√©er (d√©faut: 20)',
        )
        parser.add_argument(
            '--days-history',
            type=int,
            default=7,
            help='Nombre de jours d\'historique √† g√©n√©rer (d√©faut: 7)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Initialisation du Module Pointage & Pr√©sence PAIEPRO')
        )

        try:
            # 1. Cr√©er les groupes et permissions
            self.create_groups_and_permissions()

            # 2. Cr√©er les d√©partements si ils n'existent pas
            self.create_departments()

            # 3. Cr√©er les employ√©s de test si ils n'existent pas
            employees_count = options['employees_count']
            self.create_test_employees(employees_count)

            # 4. Cr√©er les plages horaires standard
            self.create_time_slots()

            # 5. Cr√©er les r√®gles de pointage
            self.create_attendance_rules()

            # 6. Assigner des horaires aux employ√©s
            self.assign_employee_schedules()

            # 7. G√©n√©rer un historique de pointages
            days_history = options['days_history']
            if options['full_demo']:
                days_history = 30
            self.generate_attendance_history(days_history)

            # 8. Cr√©er quelques alertes exemples
            self.create_sample_alerts()

            # 9. Afficher le r√©capitulatif
            self.display_summary()

            self.stdout.write(
                self.style.SUCCESS('‚úÖ Module Pointage & Pr√©sence initialis√© avec succ√®s!')
            )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors de l\'initialisation: {str(e)}')
            )
            raise

    def create_groups_and_permissions(self):
        """Cr√©er les groupes et permissions pour le module pointage"""
        self.stdout.write('üìã Cr√©ation des groupes et permissions...')

        # Cr√©er les permissions personnalis√©es
        permissions_data = [
            ('can_manage_attendance', 'Peut g√©rer les pr√©sences'),
            ('can_point_for_others', 'Peut pointer pour d\'autres employ√©s'),
            ('can_validate_attendance', 'Peut valider les pr√©sences'),
            ('can_correct_pointage', 'Peut corriger les pointages'),
            ('can_export_attendance', 'Peut exporter les donn√©es'),
            ('can_manage_schedules', 'Peut g√©rer les horaires'),
            ('can_view_reports', 'Peut voir les rapports'),
            ('can_admin_attendance', 'Administration du pointage'),
        ]

        # Cr√©er les groupes
        groups_data = [
            ('RH Pointage', ['can_manage_attendance', 'can_validate_attendance', 
                           'can_export_attendance', 'can_view_reports']),
            ('Manager Pointage', ['can_validate_attendance', 'can_view_reports']),
            ('Operateur Pointage', ['can_point_for_others']),
            ('Admin Pointage', ['can_admin_attendance', 'can_manage_schedules']),
        ]

        for group_name, group_permissions in groups_data:
            group, created = Group.objects.get_or_create(name=group_name)
            if created:
                self.stdout.write(f'  ‚úì Groupe cr√©√©: {group_name}')

        self.stdout.write('  ‚úì Groupes et permissions configur√©s')

    def create_departments(self):
        """Cr√©er les d√©partements de test"""
        self.stdout.write('üè¢ Cr√©ation des d√©partements...')

        departments = [
            {'nom': 'Direction G√©n√©rale', 'code': 'DG'},
            {'nom': 'Ressources Humaines', 'code': 'RH'},
            {'nom': 'Informatique', 'code': 'IT'},
            {'nom': 'Commercial', 'code': 'COM'},
            {'nom': 'Production', 'code': 'PROD'},
            {'nom': 'Logistique', 'code': 'LOG'},
            {'nom': 'Comptabilit√©', 'code': 'COMPTA'},
            {'nom': 'Marketing', 'code': 'MKT'},
        ]

        for dept_data in departments:
            dept, created = Departement.objects.get_or_create(
                code=dept_data['code'],
                defaults={
                    'nom': dept_data['nom'],
                    'actif': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úì D√©partement cr√©√©: {dept.nom}')

    def create_test_employees(self, count):
        """Cr√©er des employ√©s de test"""
        self.stdout.write(f'üë• Cr√©ation de {count} employ√©s de test...')

        # Donn√©es de test pour les employ√©s
        first_names = [
            'Ahmed', 'Fatima', 'Mohammed', 'Aisha', 'Omar', 'Khadija', 'Ali', 'Zahra',
            'Hassan', 'Layla', 'Youssef', 'Nadia', 'Khalid', 'Samira', 'Rachid', 'Amina',
            'Karim', 'Malika', 'Abdelkader', 'Zohra', 'Said', 'Aicha', 'Mustapha', 'Latifa'
        ]
        
        last_names = [
            'Alami', 'Benali', 'Cherkaoui', 'Darif', 'El Fassi', 'Ghazi', 'Hajji', 'Idrissi',
            'Jabbari', 'Kadiri', 'Lamrani', 'Mansouri', 'Naciri', 'Ouali', 'Qadiri', 'Rifai',
            'Semlali', 'Tazi', 'Umayyad', 'Wahabi', 'Yachaoui', 'Zaidi', 'Alaoui', 'Berberi'
        ]

        departements = list(Departement.objects.all())
        
        for i in range(count):
            if Employee.objects.filter(matricule=f'EMP{i+1:03d}').exists():
                continue

            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            
            employee = Employee.objects.create(
                matricule=f'EMP{i+1:03d}',
                nom=last_name,
                prenom=first_name,
                email=f'{first_name.lower()}.{last_name.lower()}@paiepro.ma',
                telephone=f'06{random.randint(10000000, 99999999)}',
                date_naissance=date(1980 + random.randint(0, 25), random.randint(1, 12), random.randint(1, 28)),
                date_embauche=date(2020 + random.randint(0, 3), random.randint(1, 12), random.randint(1, 28)),
                departement=random.choice(departements),
                poste=random.choice(['Employ√©', 'Technicien', 'Cadre', 'Responsable']),
                salaire_base=Decimal(str(random.randint(4000, 15000))),
                actif=True
            )
            
            if i == 0:  # Premier employ√© cr√©√©
                self.stdout.write(f'  ‚úì Employ√© cr√©√©: {employee.prenom} {employee.nom}')

        self.stdout.write(f'  ‚úì {count} employ√©s cr√©√©s')

    def create_time_slots(self):
        """Cr√©er les plages horaires standard"""
        self.stdout.write('‚è∞ Cr√©ation des plages horaires...')

        time_slots = [
            {
                'nom': 'Horaire Standard',
                'type_plage': 'STANDARD',
                'heure_debut': time(8, 0),
                'heure_fin': time(17, 0),
                'heure_debut_pause': time(12, 0),
                'heure_fin_pause': time(13, 0),
                'duree_pause': timedelta(hours=1),
                'jours_travailles': [1, 2, 3, 4, 5],  # Lun-Ven
            },
            {
                'nom': 'Horaire Flexible',
                'type_plage': 'FLEXIBLE',
                'heure_debut': time(8, 0),
                'heure_fin': time(17, 0),
                'duree_pause': timedelta(hours=1),
                'tolerance_arrivee': timedelta(hours=1),
                'tolerance_depart': timedelta(hours=1),
                'jours_travailles': [1, 2, 3, 4, 5],
            },
            {
                'nom': '√âquipe Matin',
                'type_plage': 'EQUIPE_MATIN',
                'heure_debut': time(6, 0),
                'heure_fin': time(14, 0),
                'heure_debut_pause': time(10, 0),
                'heure_fin_pause': time(10, 30),
                'duree_pause': timedelta(minutes=30),
                'jours_travailles': [1, 2, 3, 4, 5, 6],  # Lun-Sam
            },
            {
                'nom': '√âquipe Soir',
                'type_plage': 'EQUIPE_SOIR',
                'heure_debut': time(14, 0),
                'heure_fin': time(22, 0),
                'heure_debut_pause': time(18, 0),
                'heure_fin_pause': time(18, 30),
                'duree_pause': timedelta(minutes=30),
                'jours_travailles': [1, 2, 3, 4, 5, 6],
            },
            {
                'nom': 'Temps Partiel Matin',
                'type_plage': 'TEMPS_PARTIEL',
                'heure_debut': time(8, 0),
                'heure_fin': time(12, 0),
                'duree_pause': timedelta(minutes=15),
                'jours_travailles': [1, 2, 3, 4, 5],
            },
            {
                'nom': 'Horaire Cadre',
                'type_plage': 'CADRE',
                'heure_debut': time(9, 0),
                'heure_fin': time(18, 0),
                'duree_pause': timedelta(hours=1, minutes=30),
                'tolerance_arrivee': timedelta(hours=2),
                'tolerance_depart': timedelta(hours=2),
                'jours_travailles': [1, 2, 3, 4, 5],
            }
        ]

        for slot_data in time_slots:
            plage, created = PlageHoraire.objects.get_or_create(
                nom=slot_data['nom'],
                defaults=slot_data
            )
            if created:
                self.stdout.write(f'  ‚úì Plage horaire cr√©√©e: {plage.nom}')

        self.stdout.write('  ‚úì Plages horaires cr√©√©es')

    def create_attendance_rules(self):
        """Cr√©er les r√®gles de pointage"""
        self.stdout.write('üìã Cr√©ation des r√®gles de pointage...')

        # R√®gle standard marocaine
        regle, created = ReglePointage.objects.get_or_create(
            nom='R√®gles Standard Maroc 2024',
            defaults={
                'description': 'R√®gles de pointage conformes √† la l√©gislation marocaine',
                'tolerance_retard_minutes': 10,
                'tolerance_depart_anticipe_minutes': 10,
                'seuil_retard_alerte_minutes': 15,
                'nb_retards_alerte_mois': 3,
                'nb_absences_alerte_mois': 2,
                'seuil_heures_sup_jour': timedelta(hours=8),
                'seuil_heures_sup_semaine': timedelta(hours=44),
                'taux_majoration_25': Decimal('25.00'),
                'taux_majoration_50': Decimal('50.00'),
                'duree_pause_max_sans_retenue': timedelta(hours=1),
                'pause_payee': True,
                'validation_auto_seuil_minutes': 15,
                'validation_obligatoire_weekend': True,
                'validation_obligatoire_feries': True,
                'date_debut': date.today(),
                'actif': True,
            }
        )

        if created:
            self.stdout.write('  ‚úì R√®gle de pointage cr√©√©e')
        else:
            self.stdout.write('  ‚úì R√®gle de pointage existe d√©j√†')

    def assign_employee_schedules(self):
        """Assigner des horaires aux employ√©s"""
        self.stdout.write('üìÖ Attribution des horaires aux employ√©s...')

        employees = Employee.objects.filter(actif=True)
        plages = list(PlageHoraire.objects.filter(actif=True))

        for employee in employees:
            # √âviter les doublons
            if HoraireTravail.objects.filter(employe=employee, actif=True).exists():
                continue

            # Attribution selon le d√©partement
            if employee.departement:
                if 'Direction' in employee.departement.nom:
                    plage = PlageHoraire.objects.get(nom='Horaire Cadre')
                elif 'Production' in employee.departement.nom:
                    plage = random.choice([
                        PlageHoraire.objects.get(nom='√âquipe Matin'),
                        PlageHoraire.objects.get(nom='√âquipe Soir')
                    ])
                elif 'RH' in employee.departement.nom or 'IT' in employee.departement.nom:
                    plage = PlageHoraire.objects.get(nom='Horaire Flexible')
                else:
                    plage = PlageHoraire.objects.get(nom='Horaire Standard')
            else:
                plage = random.choice(plages)

            HoraireTravail.objects.create(
                employe=employee,
                plage_horaire=plage,
                date_debut=employee.date_embauche or date.today() - timedelta(days=30),
                actif=True
            )

        self.stdout.write('  ‚úì Horaires attribu√©s √† tous les employ√©s')

    def generate_attendance_history(self, days):
        """G√©n√©rer un historique de pointages"""
        self.stdout.write(f'üìä G√©n√©ration de {days} jours d\'historique...')

        employees = Employee.objects.filter(actif=True)
        today = date.today()

        for day_offset in range(days):
            current_date = today - timedelta(days=day_offset)
            
            # Ignorer les dimanches (jour de repos au Maroc)
            if current_date.weekday() == 6:
                continue

            for employee in employees:
                horaire = HoraireTravail.objects.filter(
                    employe=employee,
                    actif=True,
                    date_debut__lte=current_date
                ).first()

                if not horaire:
                    continue

                # V√©rifier si c'est un jour travaill√©
                jour_semaine = current_date.weekday() + 1
                if jour_semaine not in horaire.jours_travailles_effectifs:
                    continue

                # Probabilit√© de pr√©sence (90% de chance d'√™tre pr√©sent)
                if random.random() < 0.1:  # 10% d'absence
                    # Cr√©er une entr√©e d'absence
                    PresenceJournaliere.objects.get_or_create(
                        employe=employee,
                        date=current_date,
                        defaults={
                            'horaire_travail': horaire,
                            'statut_jour': 'ABSENT',
                            'heures_theoriques': horaire.plage_horaire.duree_theorique,
                        }
                    )
                    continue

                # G√©n√©rer les pointages pour cet employ√©
                self.generate_employee_day_attendance(employee, horaire, current_date)

        self.stdout.write('  ‚úì Historique de pointages g√©n√©r√©')

    def generate_employee_day_attendance(self, employee, horaire, date_pointage):
        """G√©n√©rer les pointages d'un employ√© pour une journ√©e"""
        base_datetime = datetime.combine(date_pointage, time(0, 0))
        
        # Heure d'arriv√©e (avec variation al√©atoire)
        heure_theorique_arrivee = datetime.combine(date_pointage, horaire.heure_debut_effective)
        variation_arrivee = random.randint(-15, 30)  # Entre 15 min d'avance et 30 min de retard
        heure_arrivee = heure_theorique_arrivee + timedelta(minutes=variation_arrivee)

        # Pointage arriv√©e
        pointage_arrivee = Pointage.objects.create(
            employe=employee,
            type_pointage='ARRIVEE',
            heure_pointage=heure_arrivee,
            heure_theorique=heure_theorique_arrivee,
            statut='RETARD' if variation_arrivee > 15 else 'NORMAL'
        )

        # Pause d√©jeuner (si d√©finie)
        if horaire.plage_horaire.heure_debut_pause:
            pause_debut = datetime.combine(
                date_pointage, 
                horaire.plage_horaire.heure_debut_pause
            ) + timedelta(minutes=random.randint(-10, 15))

            pause_fin = datetime.combine(
                date_pointage,
                horaire.plage_horaire.heure_fin_pause
            ) + timedelta(minutes=random.randint(-5, 10))

            Pointage.objects.create(
                employe=employee,
                type_pointage='PAUSE_DEBUT',
                heure_pointage=pause_debut,
            )

            Pointage.objects.create(
                employe=employee,
                type_pointage='PAUSE_FIN',
                heure_pointage=pause_fin,
            )

        # Heure de sortie (avec variation al√©atoire)
        heure_theorique_sortie = datetime.combine(date_pointage, horaire.heure_fin_effective)
        variation_sortie = random.randint(-30, 60)  # Entre 30 min plus t√¥t et 1h plus tard
        heure_sortie = heure_theorique_sortie + timedelta(minutes=variation_sortie)

        # 20% de chance de ne pas pointer la sortie (oubli)
        if random.random() < 0.8:
            Pointage.objects.create(
                employe=employee,
                type_pointage='SORTIE',
                heure_pointage=heure_sortie,
                heure_theorique=heure_theorique_sortie,
            )

        # Calculer et cr√©er la pr√©sence journali√®re
        from paie.services.gestionnaire_pointage import GestionnairePointage
        gestionnaire = GestionnairePointage()
        gestionnaire._mettre_a_jour_presence_journaliere(employee, date_pointage)

    def create_sample_alerts(self):
        """Cr√©er quelques alertes d'exemple"""
        self.stdout.write('üö® Cr√©ation d\'alertes d\'exemple...')

        employees = list(Employee.objects.filter(actif=True)[:5])
        
        alert_types = [
            ('RETARD', 'ATTENTION', 'Retard de plus de 20 minutes'),
            ('ABSENCE', 'ALERTE', 'Absence injustifi√©e d√©tect√©e'),
            ('RETARDS_REPETES', 'CRITIQUE', '3 retards cette semaine'),
            ('OUBLI_POINTAGE', 'ATTENTION', 'Oubli de pointage de sortie'),
        ]

        for i, (type_alerte, gravite, titre) in enumerate(alert_types):
            if i < len(employees):
                AlertePresence.objects.create(
                    type_alerte=type_alerte,
                    niveau_gravite=gravite,
                    employe=employees[i],
                    date_concernee=date.today() - timedelta(days=random.randint(0, 3)),
                    titre=titre,
                    message=f'Alerte automatique g√©n√©r√©e pour {employees[i].prenom} {employees[i].nom}',
                    details={'generated': True, 'demo': True}
                )

        self.stdout.write('  ‚úì Alertes d\'exemple cr√©√©es')

    def display_summary(self):
        """Afficher un r√©sum√© de l'initialisation"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìà R√âSUM√â DE L\'INITIALISATION'))
        self.stdout.write('='*60)

        # Compter les √©l√©ments cr√©√©s
        stats = {
            'D√©partements': Departement.objects.count(),
            'Employ√©s': Employee.objects.filter(actif=True).count(),
            'Plages horaires': PlageHoraire.objects.filter(actif=True).count(),
            'R√®gles de pointage': ReglePointage.objects.filter(actif=True).count(),
            'Horaires assign√©s': HoraireTravail.objects.filter(actif=True).count(),
            'Pointages g√©n√©r√©s': Pointage.objects.count(),
            'Pr√©sences journali√®res': PresenceJournaliere.objects.count(),
            'Alertes': AlertePresence.objects.filter(statut='NOUVELLE').count(),
        }

        for label, count in stats.items():
            self.stdout.write(f'{label:.<30} {count:>5}')

        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üéØ ACC√àS AU SYST√àME'))
        self.stdout.write('='*60)

        self.stdout.write('Interface de pointage: /spa/attendance/timeclock/')
        self.stdout.write('Dashboard temps r√©el: /spa/attendance/dashboard/')
        self.stdout.write('Validation pr√©sences: /spa/attendance/validation/')
        self.stdout.write('Rapports: /spa/attendance/reports/')
        self.stdout.write('Configuration: /spa/attendance/settings/')

        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üîë COMPTES DE TEST'))
        self.stdout.write('='*60)

        # Suggestions pour les comptes admin
        if User.objects.filter(is_superuser=True).exists():
            admin_user = User.objects.filter(is_superuser=True).first()
            self.stdout.write(f'Admin existant: {admin_user.username}')
        else:
            self.stdout.write('Cr√©ez un superuser avec: python manage.py createsuperuser')

        self.stdout.write('\n' + self.style.WARNING('üí° PROCHAINES √âTAPES:'))
        self.stdout.write('1. Configurez les groupes utilisateurs dans l\'admin')
        self.stdout.write('2. Testez l\'interface de pointage')
        self.stdout.write('3. Personnalisez les r√®gles de pointage')
        self.stdout.write('4. Configurez les notifications')
        self.stdout.write('5. Formez vos utilisateurs')

    def create_superuser_if_needed(self):
        """Cr√©er un superuser pour les tests si n√©cessaire"""
        if not User.objects.filter(is_superuser=True).exists():
            User.objects.create_superuser(
                username='admin',
                email='admin@paiepro.ma',
                password='admin123',
                first_name='Administrator',
                last_name='PAIEPRO'
            )
            self.stdout.write('  ‚úì Superuser cr√©√©: admin / admin123')

# ============================================================================
# SCRIPT ADDITIONNEL : Nettoyage des donn√©es de test
# ============================================================================

class CleanupCommand(BaseCommand):
    """Commande pour nettoyer les donn√©es de test"""
    help = 'Nettoie les donn√©es de test du module pointage'

    def handle(self, *args, **options):
        self.stdout.write('üßπ Nettoyage des donn√©es de test...')
        
        # Supprimer dans l'ordre inverse des d√©pendances
        AlertePresence.objects.filter(details__demo=True).delete()
        PresenceJournaliere.objects.all().delete()
        Pointage.objects.all().delete()
        ValidationPresence.objects.all().delete()
        HoraireTravail.objects.all().delete()
        ReglePointage.objects.all().delete()
        PlageHoraire.objects.all().delete()
        
        # Optionnel: supprimer les employ√©s de test
        Employee.objects.filter(matricule__startswith='EMP').delete()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Donn√©es de test supprim√©es'))

# ============================================================================
# UTILITAIRES POUR LES D√âVELOPPEURS
# ============================================================================

def create_dev_data():
    """Fonction utilitaire pour cr√©er des donn√©es de d√©veloppement"""
    from django.core.management import call_command
    
    print("üîß Cr√©ation des donn√©es de d√©veloppement...")
    call_command('init_attendance_module', '--full-demo', '--employees-count', '50')
    print("‚úÖ Donn√©es de d√©veloppement cr√©√©es")

def reset_attendance_module():
    """Fonction utilitaire pour r√©initialiser compl√®tement le module"""
    print("üîÑ R√©initialisation du module pointage...")
    
    # Nettoyer les donn√©es existantes
    AlertePresence.objects.all().delete()
    PresenceJournaliere.objects.all().delete()
    Pointage.objects.all().delete()
    ValidationPresence.objects.all().delete()
    HoraireTravail.objects.all().delete()
    ReglePointage.objects.all().delete()
    PlageHoraire.objects.all().delete()
    
    # Recr√©er les donn√©es
    create_dev_data()
    print("‚úÖ Module r√©initialis√©")